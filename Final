{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/imelike/ensemblemethods?scriptVersionId=197155679\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"fe8cb4bc","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-09-18T12:50:38.928729Z","iopub.status.busy":"2024-09-18T12:50:38.928291Z","iopub.status.idle":"2024-09-18T12:50:39.383313Z","shell.execute_reply":"2024-09-18T12:50:39.38213Z"},"papermill":{"duration":0.467096,"end_time":"2024-09-18T12:50:39.386793","exception":false,"start_time":"2024-09-18T12:50:38.919697","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["/kaggle/input/air-quality-and-health-impact-dataset/air_quality_health_impact_data.csv\n"]}],"source":["# This Python 3 environment comes with many helpful analytics libraries installed\n","# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n","# For example, here's several helpful packages to load\n","\n","import numpy as np # linear algebra\n","import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n","\n","# Input data files are available in the read-only \"../input/\" directory\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))\n","\n","# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n","# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"]},{"cell_type":"code","execution_count":2,"id":"81eaf036","metadata":{"execution":{"iopub.execute_input":"2024-09-18T12:50:39.402133Z","iopub.status.busy":"2024-09-18T12:50:39.401513Z","iopub.status.idle":"2024-09-18T12:50:39.483727Z","shell.execute_reply":"2024-09-18T12:50:39.482376Z"},"papermill":{"duration":0.092781,"end_time":"2024-09-18T12:50:39.486427","exception":false,"start_time":"2024-09-18T12:50:39.393646","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>RecordID</th>\n","      <th>AQI</th>\n","      <th>PM10</th>\n","      <th>PM2_5</th>\n","      <th>NO2</th>\n","      <th>SO2</th>\n","      <th>O3</th>\n","      <th>Temperature</th>\n","      <th>Humidity</th>\n","      <th>WindSpeed</th>\n","      <th>RespiratoryCases</th>\n","      <th>CardiovascularCases</th>\n","      <th>HospitalAdmissions</th>\n","      <th>HealthImpactScore</th>\n","      <th>HealthImpactClass</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>187.270059</td>\n","      <td>295.853039</td>\n","      <td>13.038560</td>\n","      <td>6.639263</td>\n","      <td>66.161150</td>\n","      <td>54.624280</td>\n","      <td>5.150335</td>\n","      <td>84.424344</td>\n","      <td>6.137755</td>\n","      <td>7</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>97.244041</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>475.357153</td>\n","      <td>246.254703</td>\n","      <td>9.984497</td>\n","      <td>16.318326</td>\n","      <td>90.499523</td>\n","      <td>169.621728</td>\n","      <td>1.543378</td>\n","      <td>46.851415</td>\n","      <td>4.521422</td>\n","      <td>10</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>100.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>365.996971</td>\n","      <td>84.443191</td>\n","      <td>23.111340</td>\n","      <td>96.317811</td>\n","      <td>17.875850</td>\n","      <td>9.006794</td>\n","      <td>1.169483</td>\n","      <td>17.806977</td>\n","      <td>11.157384</td>\n","      <td>13</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>100.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>299.329242</td>\n","      <td>21.020609</td>\n","      <td>14.273403</td>\n","      <td>81.234403</td>\n","      <td>48.323616</td>\n","      <td>93.161033</td>\n","      <td>21.925276</td>\n","      <td>99.473373</td>\n","      <td>15.302500</td>\n","      <td>8</td>\n","      <td>8</td>\n","      <td>1</td>\n","      <td>100.000000</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>78.009320</td>\n","      <td>16.987667</td>\n","      <td>152.111623</td>\n","      <td>121.235461</td>\n","      <td>90.866167</td>\n","      <td>241.795138</td>\n","      <td>9.217517</td>\n","      <td>24.906837</td>\n","      <td>14.534733</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>95.182643</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   RecordID         AQI        PM10       PM2_5         NO2        SO2  \\\n","0         1  187.270059  295.853039   13.038560    6.639263  66.161150   \n","1         2  475.357153  246.254703    9.984497   16.318326  90.499523   \n","2         3  365.996971   84.443191   23.111340   96.317811  17.875850   \n","3         4  299.329242   21.020609   14.273403   81.234403  48.323616   \n","4         5   78.009320   16.987667  152.111623  121.235461  90.866167   \n","\n","           O3  Temperature   Humidity  WindSpeed  RespiratoryCases  \\\n","0   54.624280     5.150335  84.424344   6.137755                 7   \n","1  169.621728     1.543378  46.851415   4.521422                10   \n","2    9.006794     1.169483  17.806977  11.157384                13   \n","3   93.161033    21.925276  99.473373  15.302500                 8   \n","4  241.795138     9.217517  24.906837  14.534733                 9   \n","\n","   CardiovascularCases  HospitalAdmissions  HealthImpactScore  \\\n","0                    5                   1          97.244041   \n","1                    2                   0         100.000000   \n","2                    3                   0         100.000000   \n","3                    8                   1         100.000000   \n","4                    0                   1          95.182643   \n","\n","   HealthImpactClass  \n","0                0.0  \n","1                0.0  \n","2                0.0  \n","3                0.0  \n","4                0.0  "]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["df = pd.read_csv('/kaggle/input/air-quality-and-health-impact-dataset/air_quality_health_impact_data.csv')\n","pd.set_option('max_colwidth', 100)\n","df.head(5)"]},{"cell_type":"code","execution_count":3,"id":"6afa64d0","metadata":{"execution":{"iopub.execute_input":"2024-09-18T12:50:39.50125Z","iopub.status.busy":"2024-09-18T12:50:39.500273Z","iopub.status.idle":"2024-09-18T12:50:40.794058Z","shell.execute_reply":"2024-09-18T12:50:40.79273Z"},"papermill":{"duration":1.304284,"end_time":"2024-09-18T12:50:40.797002","exception":false,"start_time":"2024-09-18T12:50:39.492718","status":"completed"},"tags":[]},"outputs":[],"source":["from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix"]},{"cell_type":"code","execution_count":4,"id":"1fd532d1","metadata":{"execution":{"iopub.execute_input":"2024-09-18T12:50:40.812061Z","iopub.status.busy":"2024-09-18T12:50:40.811424Z","iopub.status.idle":"2024-09-18T12:50:40.828939Z","shell.execute_reply":"2024-09-18T12:50:40.82766Z"},"papermill":{"duration":0.028254,"end_time":"2024-09-18T12:50:40.831818","exception":false,"start_time":"2024-09-18T12:50:40.803564","status":"completed"},"tags":[]},"outputs":[],"source":["# Özellikler ve hedef değişkeni belirleme\n","X = df.drop(columns=['HealthImpactClass'])\n","y = df['HealthImpactClass']\n","\n","# Veri setini eğitim ve test olarak ayırma\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=58)"]},{"cell_type":"markdown","id":"7b5fcac9","metadata":{"papermill":{"duration":0.005981,"end_time":"2024-09-18T12:50:40.844127","exception":false,"start_time":"2024-09-18T12:50:40.838146","status":"completed"},"tags":[]},"source":["## 1) Boosting\n","\n","Boosting, zayıf öğrenicileri (weak learners) güçlü bir tahminciye dönüştürmeyi amaçlayan bir makine öğrenimi topluluk (ensemble) tekniğidir. Boosting, her bir zayıf öğrenicinin hatalarını düzelterek modelin doğruluğunu artırır.\n","\n","Boosting'in prensipleri şunlardır:\n","\n","- Adım Adım Öğrenme: Boosting, zayıf öğrenicileri ardışık olarak eğitir. Her yeni model, önceki modellerin hatalarını düzelterek daha iyi tahmin yapmaya çalışır.\n","- Ağırlıklandırma: Her bir örneğin hata oranına göre ağırlıklandırılır. Hatalı sınıflandırılmış örnekler daha yüksek ağırlık alır, böylece sonraki model bu örnekleri daha iyi öğrenir.\n","- Topluluk Kararı: Nihai tahmin, tüm zayıf öğrenicilerin tahminlerinin ağırlıklı toplamı veya çoğunluk kararı ile belirlenir.\n","\n","### 1.1 Gradient Boosting\n","\n","Gradient Boosting, zayıf modellerin ardışık olarak eğitilmesiyle güçlü bir model oluşturur. Her bir model, önceki modellerin hatalarını düzelterek öğrenir."]},{"cell_type":"code","execution_count":5,"id":"c8abd945","metadata":{"execution":{"iopub.execute_input":"2024-09-18T12:50:40.858428Z","iopub.status.busy":"2024-09-18T12:50:40.857997Z","iopub.status.idle":"2024-09-18T12:50:52.161084Z","shell.execute_reply":"2024-09-18T12:50:52.159726Z"},"papermill":{"duration":11.313537,"end_time":"2024-09-18T12:50:52.163869","exception":false,"start_time":"2024-09-18T12:50:40.850332","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Confusion Matrix:\n","[[960   1   2   2   1]\n"," [  3 104   1   1   2]\n"," [  5   1  45   1   4]\n"," [  2   3   1   7   1]\n"," [  3   6   1   3   3]]\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.99      0.99      0.99       966\n","         1.0       0.90      0.94      0.92       111\n","         2.0       0.90      0.80      0.85        56\n","         3.0       0.50      0.50      0.50        14\n","         4.0       0.27      0.19      0.22        16\n","\n","    accuracy                           0.96      1163\n","   macro avg       0.71      0.68      0.70      1163\n","weighted avg       0.96      0.96      0.96      1163\n","\n"]}],"source":["from sklearn.ensemble import GradientBoostingClassifier\n","\n","# Gradient Boosting modelini oluşturma\n","gb_model = GradientBoostingClassifier(random_state=58)\n","gb_model.fit(X_train, y_train)\n","\n","# Tahmin yapma\n","y_pred = gb_model.predict(X_test)\n","\n","# Sonuçları değerlendirme\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"markdown","id":"abc83407","metadata":{"papermill":{"duration":0.006096,"end_time":"2024-09-18T12:50:52.176436","exception":false,"start_time":"2024-09-18T12:50:52.17034","status":"completed"},"tags":[]},"source":["### 1.2 AdaBoost\n","\n","AdaBoost, zayıf öğreniciler (genellikle decision tree'ler) kullanarak ardışık olarak modeller oluşturur ve her adımda hataları düzelterek güçlü bir model oluşturur."]},{"cell_type":"code","execution_count":6,"id":"bd053eba","metadata":{"execution":{"iopub.execute_input":"2024-09-18T12:50:52.191855Z","iopub.status.busy":"2024-09-18T12:50:52.19059Z","iopub.status.idle":"2024-09-18T12:50:52.826578Z","shell.execute_reply":"2024-09-18T12:50:52.82535Z"},"papermill":{"duration":0.646591,"end_time":"2024-09-18T12:50:52.829409","exception":false,"start_time":"2024-09-18T12:50:52.182818","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Confusion Matrix:\n","[[694 153 101  18   0]\n"," [ 62  37  10   2   0]\n"," [ 36   5   8   4   3]\n"," [  8   1   3   1   1]\n"," [  5   4   5   1   1]]\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.86      0.72      0.78       966\n","         1.0       0.18      0.33      0.24       111\n","         2.0       0.06      0.14      0.09        56\n","         3.0       0.04      0.07      0.05        14\n","         4.0       0.20      0.06      0.10        16\n","\n","    accuracy                           0.64      1163\n","   macro avg       0.27      0.27      0.25      1163\n","weighted avg       0.74      0.64      0.68      1163\n","\n"]}],"source":["from sklearn.ensemble import AdaBoostClassifier\n","\n","# AdaBoost modelini oluşturma\n","ab_model = AdaBoostClassifier(random_state=58)\n","ab_model.fit(X_train, y_train)\n","\n","# Tahmin yapma\n","y_pred = ab_model.predict(X_test)\n","\n","# Sonuçları değerlendirme\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"markdown","id":"cd9b8e7e","metadata":{"papermill":{"duration":0.00627,"end_time":"2024-09-18T12:50:52.842205","exception":false,"start_time":"2024-09-18T12:50:52.835935","status":"completed"},"tags":[]},"source":["### 1.3 XGBoost\n","\n","XGBoost, performans ve hız açısından oldukça güçlü bir boosting algoritmasıdır. Aynı zamanda eksik verilerle başa çıkma yeteneği de vardır."]},{"cell_type":"code","execution_count":7,"id":"eca00101","metadata":{"execution":{"iopub.execute_input":"2024-09-18T12:50:52.857246Z","iopub.status.busy":"2024-09-18T12:50:52.856739Z","iopub.status.idle":"2024-09-18T12:50:53.624799Z","shell.execute_reply":"2024-09-18T12:50:53.623855Z"},"papermill":{"duration":0.778549,"end_time":"2024-09-18T12:50:53.627352","exception":false,"start_time":"2024-09-18T12:50:52.848803","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Confusion Matrix:\n","[[960   0   3   2   1]\n"," [  2 104   2   2   1]\n"," [  2   1  44   6   3]\n"," [  1   0   2  10   1]\n"," [  5   2   2   3   4]]\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.99      0.99      0.99       966\n","         1.0       0.97      0.94      0.95       111\n","         2.0       0.83      0.79      0.81        56\n","         3.0       0.43      0.71      0.54        14\n","         4.0       0.40      0.25      0.31        16\n","\n","    accuracy                           0.96      1163\n","   macro avg       0.73      0.74      0.72      1163\n","weighted avg       0.97      0.96      0.96      1163\n","\n"]}],"source":["import xgboost as xgb\n","\n","# XGBoost modelini oluşturma\n","xgb_model = xgb.XGBClassifier(random_state=58)\n","xgb_model.fit(X_train, y_train)\n","\n","# Tahmin yapma\n","y_pred = xgb_model.predict(X_test)\n","\n","# Sonuçları değerlendirme\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"markdown","id":"1690fb6f","metadata":{"papermill":{"duration":0.006261,"end_time":"2024-09-18T12:50:53.640189","exception":false,"start_time":"2024-09-18T12:50:53.633928","status":"completed"},"tags":[]},"source":["## 2) Majority Voting\n","\n","Majority voting ensemble, birden fazla makine öğrenimi modelinin tahminlerini birleştirerek nihai sınıflandırma kararını veren bir ensemble yöntemidir. Bu yöntemde, her bir modelin verdiği sınıf tahminleri alınır ve en çok oy alan sınıf, nihai tahmin olarak seçilir. Bu yaklaşım, farklı modellerin güçlü yönlerini birleştirerek daha doğru ve sağlam bir tahmin yapmayı amaçlar.\n","\n","Çalışma Prensibi\n","Farklı Modellerin Eğitimi: Farklı türde makine öğrenimi modelleri (örneğin, decision tree, k-nearest neighbors, logistic regression) aynı veri seti üzerinde eğitilir.\n","Tahminlerin Alınması: Test verileri üzerinde her bir modelin tahminleri yapılır.\n","Oyların Birleştirilmesi: Her bir veri noktası için modellerin yaptığı tahminler alınır ve en çok oyu alan sınıf, nihai tahmin olarak belirlenir."]},{"cell_type":"code","execution_count":8,"id":"65db69c6","metadata":{"execution":{"iopub.execute_input":"2024-09-18T12:50:53.65539Z","iopub.status.busy":"2024-09-18T12:50:53.654532Z","iopub.status.idle":"2024-09-18T12:51:19.270558Z","shell.execute_reply":"2024-09-18T12:51:19.269392Z"},"papermill":{"duration":25.626679,"end_time":"2024-09-18T12:51:19.273304","exception":false,"start_time":"2024-09-18T12:50:53.646625","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"name":"stdout","output_type":"stream","text":["Confusion Matrix:\n","[[963   1   0   0   2]\n"," [ 39  70   0   2   0]\n"," [ 18  16  21   1   0]\n"," [  7   3   4   0   0]\n"," [ 11   3   1   0   1]]\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.93      1.00      0.96       966\n","         1.0       0.75      0.63      0.69       111\n","         2.0       0.81      0.38      0.51        56\n","         3.0       0.00      0.00      0.00        14\n","         4.0       0.33      0.06      0.11        16\n","\n","    accuracy                           0.91      1163\n","   macro avg       0.56      0.41      0.45      1163\n","weighted avg       0.89      0.91      0.89      1163\n","\n"]}],"source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import VotingClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Veri setini yükleyin ve bağımlı ve bağımsız değişkenleri ayır\n","X = df.drop(columns=['HealthImpactClass'])\n","y = df['HealthImpactClass']\n","\n","# Veri setini eğitim ve test olarak ayır\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=58)\n","\n","# Modelleri tanımla\n","log_clf = LogisticRegression(random_state=58, max_iter=10000)\n","knn_clf = KNeighborsClassifier(n_neighbors=5)\n","dt_clf = DecisionTreeClassifier(random_state=58)\n","\n","# Majority Voting Ensemble oluştur\n","voting_clf = VotingClassifier(\n","    estimators=[('lr', log_clf), ('knn', knn_clf), ('dt', dt_clf)],\n","    voting='hard'  # 'hard' majority voting, 'soft' probability averaging\n",")\n","\n","# Ansambl modelini eğit\n","voting_clf.fit(X_train, y_train)\n","\n","# Tahmin yapın\n","y_pred = voting_clf.predict(X_test)\n","\n","# Sonuçları değerlendir\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"markdown","id":"12194872","metadata":{"papermill":{"duration":0.006519,"end_time":"2024-09-18T12:51:19.286611","exception":false,"start_time":"2024-09-18T12:51:19.280092","status":"completed"},"tags":[]},"source":["## 3) Bagging (Bootstrap Aggregating)\n","\n","Bagging yöntemi, modelin genel performansını artırmak amacıyla birden fazla modelin aynı veri setinden rastgele seçilmiş alt örnekler üzerinde eğitildiği bir ensemble yöntemidir. Bagging, overfitting riskini azaltarak modelin genelleme yeteneğini artırır. Bu yöntem, özellikle yüksek varyansa sahip modellerde etkili sonuçlar verir.\n","Bu yönteme örnek olarak Random Forest’ı ayrı bir .ipynb dosyasında kullandım. Random Forest da bir bagging yöntemidir."]},{"cell_type":"markdown","id":"f2478dab","metadata":{"papermill":{"duration":0.006642,"end_time":"2024-09-18T12:51:19.299968","exception":false,"start_time":"2024-09-18T12:51:19.293326","status":"completed"},"tags":[]},"source":["## 4) Stacking\n","\n","Stacking, birden fazla modelin tahminlerini bir araya getirerek, nihai tahmini yapmak için bu tahminleri ikinci bir modelle (meta-learner) öğrenen bir ensemble yöntemidir. Stacking, temel öğrenicilerin (base learners) zayıf yanlarını telafi ederek genel model performansını artırmayı amaçlar.\n","\n","Stacking'in Adımları\n","Temel Öğrenicilerin Eğitimi (Base Learners):\n","\n","Farklı algoritmalardan bir dizi temel model (örneğin, lojistik regresyon, SVM, karar ağaçları) eğitilir.\n","Bu modeller veri setinin farklı özelliklerini yakalamaya çalışır.\n","Meta Öğrenicinin Eğitimi (Meta-Learner):\n","\n","Temel öğrenicilerin tahminleri bir araya getirilir ve bu tahminler, yeni bir model (meta-learner) ile birleştirilir.\n","Meta-learner, temel öğrenicilerin tahminlerine dayanarak nihai tahmini yapar.\n","\n","Stacking, çok sınıflı veri setlerinde farklı model türlerinin güçlü yönlerini bir araya getirerek daha iyi bir genel performans sağlayabilir. Özellikle bu veri setinde, çeşitli hava kalitesi ve sağlık etkisi ölçümlerine dayanan çok sayıda sınıf bulunduğundan, stacking gibi bir ensemble yöntemi, sınıflandırma performansını artırmada etkili olabilir."]},{"cell_type":"code","execution_count":9,"id":"d5bcbe35","metadata":{"execution":{"iopub.execute_input":"2024-09-18T12:51:19.315743Z","iopub.status.busy":"2024-09-18T12:51:19.314914Z","iopub.status.idle":"2024-09-18T12:51:27.454053Z","shell.execute_reply":"2024-09-18T12:51:27.452552Z"},"papermill":{"duration":8.151391,"end_time":"2024-09-18T12:51:27.458119","exception":false,"start_time":"2024-09-18T12:51:19.306728","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"name":"stdout","output_type":"stream","text":["Confusion Matrix:\n","[[961   2   1   1   1]\n"," [  4 103   1   2   1]\n"," [  4   1  47   4   0]\n"," [  3   2   1   8   0]\n"," [  4   2   5   3   2]]\n","\n","Classification Report:\n","              precision    recall  f1-score   support\n","\n","         0.0       0.98      0.99      0.99       966\n","         1.0       0.94      0.93      0.93       111\n","         2.0       0.85      0.84      0.85        56\n","         3.0       0.44      0.57      0.50        14\n","         4.0       0.50      0.12      0.20        16\n","\n","    accuracy                           0.96      1163\n","   macro avg       0.74      0.69      0.69      1163\n","weighted avg       0.96      0.96      0.96      1163\n","\n"]}],"source":["import numpy as np\n","import pandas as pd\n","from sklearn.ensemble import StackingClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix\n","\n","# Veri setini yükleme\n","# df = pd.read_csv('path_to_dataset.csv')\n","\n","# Özellikler ve hedef değişkeni belirleme\n","X = df.drop(columns=['HealthImpactClass'])\n","y = df['HealthImpactClass']\n","\n","# Veri setini eğitim ve test olarak ayırma\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=58)\n","\n","# Temel öğrenicileri tanımlama\n","estimators = [\n","    ('lr', LogisticRegression(max_iter=1000, random_state=58)),\n","    ('knn', KNeighborsClassifier(n_neighbors=5)),\n","    ('dt', DecisionTreeClassifier(random_state=58))\n","]\n","\n","# StackingClassifier'ı tanımlama\n","stacking_clf = StackingClassifier(\n","    estimators=estimators,\n","    final_estimator=LogisticRegression(max_iter=1000, random_state=58),\n","    cv=5\n",")\n","\n","# Modeli eğitme\n","stacking_clf.fit(X_train, y_train)\n","\n","# Tahmin yapma\n","y_pred = stacking_clf.predict(X_test)\n","\n","# Sonuçları değerlendirme\n","print(\"Confusion Matrix:\")\n","print(confusion_matrix(y_test, y_pred))\n","print(\"\\nClassification Report:\")\n","print(classification_report(y_test, y_pred))"]},{"cell_type":"code","execution_count":null,"id":"01db38ab","metadata":{"papermill":{"duration":0.01492,"end_time":"2024-09-18T12:51:27.488801","exception":false,"start_time":"2024-09-18T12:51:27.473881","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":5200310,"sourceId":8675842,"sourceType":"datasetVersion"}],"dockerImageVersionId":30761,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":52.058042,"end_time":"2024-09-18T12:51:28.121939","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-09-18T12:50:36.063897","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}